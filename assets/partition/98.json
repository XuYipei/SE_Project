{
  "id": "98",
  "title": "未来程序·改",
  "type": "traditional",
  "sections": [
    {
      "title": "",
      "content": "\u003cp\u003e在 2111 年，第 128 届全国青少年信息学奥林匹克冬令营前夕，Z君找到了 2015 年，第 32 届冬令营的题目来练习。\u003c/p\u003e\u003cp\u003e他打开了第三题 “未来程序” 这道题目：\u003c/p\u003e\u003cp\u003e“本题是一道提交答案题，一共 10 个测试点。\u003c/p\u003e\u003cp\u003e对于每个测试点，你会得到一段程序的源代码和这段程序的输入。你要运行这个程序，并保存这个程序的输出。\u003c/p\u003e\u003cp\u003e遗憾的是这些程序都效率极其低下，无法在比赛的 5 个小时内得到输出。”\u003c/p\u003e\u003cp\u003eZ君想了一下，决定用 2111 年的计算机来试着运行这个题目，但是问题来了，Z君已经找不到 96 年前的那次比赛的测试数据了……\u003c/p\u003e\u003cp\u003e没有给出输入数据的提交答案题就不成其“提交答案题”之名，为了解决这个问题，Z君决定将这个题目改造成传统题。\u003c/p\u003e\u003cp\u003eZ君知道 96 年前的计算机的性能比现在差多了，所以这道题的测试数据中，输入数据的规模被设计成很小，从而，做这道题的选手只需要暴力模拟源代码的工作流程就可以通过它。\u003c/p\u003e\u003cp\u003e现在这道题摆到了你的面前。\u003c/p\u003e\u003cp\u003e本题是一道传统题，一共有 10 个测试点。\u003c/p\u003e\u003cp\u003e对于每个测试点，你的程序会得到一段程序的源代码和这段程序的输入。你的程序需要运行这段程序，并输出这段程序的输出。\u003c/p\u003e",
      "misc": ""
    },
    {
      "title": "关于给出的源代码的约定",
      "content": "\u003cp\u003eZ君是一名C++选手。为了简化这个问题，Z君在给出的源代码中去掉了C++语言的大量特性。从而这个源代码具有以下特点：\u003c/p\u003e\u003cul\u003e\u003cli\u003e第一行必定为 “\u003csamp\u003e#include\u0026lt;iostream\u0026gt;\u003c/samp\u003e” （不含引号）\u003cul\u003e\u003cli\u003e这个库中只会调用到对象 \u003csamp\u003ecin\u003c/samp\u003e，\u003csamp\u003ecout\u003c/samp\u003e，\u003csamp\u003eendl\u003c/samp\u003e，\u003csamp\u003ecin\u003c/samp\u003e 的 \u003csamp\u003e\u0026gt;\u0026gt;(int)\u003c/samp\u003e 函数和 \u003csamp\u003ecout\u003c/samp\u003e 的 \u003csamp\u003e\u0026lt;\u0026lt;(int)\u003c/samp\u003e 函数。这两个函数分别用于输入和输出一个整数，返回值分别 \u003csamp\u003ecin\u003c/samp\u003e 和 \u003csamp\u003ecout\u003c/samp\u003e。\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e第二行必定为 “\u003csamp\u003e#include\u0026lt;cstdio\u0026gt;\u003c/samp\u003e” （不含引号）\u003cul\u003e\u003cli\u003e这个库中只会调用到 \u003csamp\u003eputchar\u003c/samp\u003e 函数。\u003csamp\u003eputchar(c)\u003c/samp\u003e 会输出 ASCII 码为 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-1\"\u003e\u003cspan class=\"MJXp-mi MJXp-italic\" id=\"MJXp-Span-2\"\u003ec\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-1\"\u003ec\u003c/script\u003e 的字符，并返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-3\"\u003e\u003cspan class=\"MJXp-mi MJXp-italic\" id=\"MJXp-Span-4\"\u003ec\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-2\"\u003ec\u003c/script\u003e。\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e第三行必定为 “\u003csamp\u003eusing namespace std;\u003c/samp\u003e” （不含引号）\u003cul\u003e\u003cli\u003e对象 \u003csamp\u003ecin\u003c/samp\u003e 的调用不再需要通过 \u003csamp\u003estd::cin\u003c/samp\u003e 进行，\u003csamp\u003ecout\u003c/samp\u003e 和 \u003csamp\u003eendl\u003c/samp\u003e 同理。\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003eint main()\u003c/samp\u003e 没有任何参数。\u003c/li\u003e\n\u003cli\u003e所有的变量都是 \u003csamp\u003eint\u003c/samp\u003e 或 \u003csamp\u003eint\u003c/samp\u003e 数组（含高维数组）类型。\u003cul\u003e\u003cli\u003e对象 \u003csamp\u003ecin\u003c/samp\u003e, \u003csamp\u003ecout\u003c/samp\u003e, \u003csamp\u003eendl\u003c/samp\u003e 是例外，注意 \u003csamp\u003eputchar\u003c/samp\u003e 的参数也是int类型的。我们保证在运行时这个参数的值在 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-5\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-6\"\u003e0\u003c/span\u003e\u003cspan class=\"MJXp-mo\" id=\"MJXp-Span-7\" style=\"margin-left: 0.333em; margin-right: 0.333em;\"\u003e∼\u003c/span\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-8\"\u003e127\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-3\"\u003e0 \\sim 127\u003c/script\u003e 中。\u003c/li\u003e\n\u003cli\u003e在运行时，不会出现数组越界问题。\u003c/li\u003e\n\u003cli\u003e没有维度的范围为 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-9\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-10\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-4\"\u003e1\u003c/script\u003e。也即，不会出现 \u003csamp\u003eint a[1][1][1][1][1];\u003c/samp\u003e 这样的情况。\u003c/li\u003e\n\u003cli\u003e维度的范围直接由十进制常量给出。也即，不会出现 \u003csamp\u003eint a[(100+100)*2];\u003c/samp\u003e 这样的情况。\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e所有的函数都是 \u003csamp\u003eint\u003c/samp\u003e 类型，函数的参数只可能是 \u003csamp\u003eint\u003c/samp\u003e 类型\u003cul\u003e\u003cli\u003e注意函数的返回值可以被丢弃。\u003c/li\u003e\n\u003cli\u003e当没有显式地返回值时，返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-11\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-12\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-5\"\u003e0\u003c/script\u003e。\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003ebool\u003c/samp\u003e 型被认为是一种特殊的 \u003csamp\u003eint\u003c/samp\u003e 型\u003cul\u003e\u003cli\u003e\u003csamp\u003e==\u003c/samp\u003e 在两个参数相同时返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-13\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-14\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-6\"\u003e1\u003c/script\u003e，否则返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-15\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-16\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-7\"\u003e0\u003c/script\u003e。\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e!=\u003c/samp\u003e 在两个参数相同时返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-17\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-18\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-8\"\u003e0\u003c/script\u003e，否则返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-19\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-20\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-9\"\u003e1\u003c/script\u003e。\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e\u0026lt;\u003c/samp\u003e 在第一个参数小于第二个参数时返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-21\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-22\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-10\"\u003e1\u003c/script\u003e，否则返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-23\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-24\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-11\"\u003e0\u003c/script\u003e。\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e\u0026lt;=\u003c/samp\u003e 在第一个参数小于等于第二个参数时返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-25\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-26\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-12\"\u003e1\u003c/script\u003e，否则返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-27\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-28\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-13\"\u003e0\u003c/script\u003e。\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e\u0026gt;\u003c/samp\u003e 在第一个参数大于第二个参数时返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-29\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-30\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-14\"\u003e1\u003c/script\u003e，否则返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-31\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-32\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-15\"\u003e0\u003c/script\u003e。\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e\u0026gt;=\u003c/samp\u003e 在第一个参数大于等于第二个参数时返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-33\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-34\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-16\"\u003e1\u003c/script\u003e，否则返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-35\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-36\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-17\"\u003e0\u003c/script\u003e。\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e\u0026amp;\u0026amp;\u003c/samp\u003e 在两个参数都不为 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-37\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-38\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-18\"\u003e0\u003c/script\u003e 时返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-39\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-40\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-19\"\u003e1\u003c/script\u003e，否则返回0。\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e||\u003c/samp\u003e 在两个参数都为 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-41\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-42\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-20\"\u003e0\u003c/script\u003e 时返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-43\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-44\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-21\"\u003e0\u003c/script\u003e，否则返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-45\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-46\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-22\"\u003e1\u003c/script\u003e。\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e^\u003c/samp\u003e 在两个参数中只有一个为 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-47\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-48\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-23\"\u003e0\u003c/script\u003e 时返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-49\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-50\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-24\"\u003e1\u003c/script\u003e，其他时候返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-51\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-52\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-25\"\u003e0\u003c/script\u003e。\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e!\u003c/samp\u003e 在参数为 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-53\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-54\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-26\"\u003e0\u003c/script\u003e 时返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-55\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-56\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-27\"\u003e1\u003c/script\u003e，否则返回 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-57\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-58\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-28\"\u003e0\u003c/script\u003e。\u003c/li\u003e\n\u003cli\u003e由于 \u003csamp\u003ebool\u003c/samp\u003e 型被 \u003csamp\u003eint\u003c/samp\u003e 型取代了，因此所有的表达式都应该被完全计算：例如在表达式 \u003csamp\u003e(a \u0026amp;\u0026amp; (b = c))\u003c/samp\u003e中，即使 \u003csamp\u003ea\u003c/samp\u003e 已经被确定是 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-59\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-60\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-29\"\u003e0\u003c/script\u003e，仍然需要计算 \u003csamp\u003e(b = c)\u003c/samp\u003e 的值，尽管无论 \u003csamp\u003e(b = c)\u003c/samp\u003e 的值如何，整个表达式的值都是 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-61\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-62\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-30\"\u003e0\u003c/script\u003e。\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e可能用到的运算符及其优先级如下：（从高到低排列）\u003col\u003e\u003cli\u003e\u003csamp\u003e()\u003c/samp\u003e, \u003csamp\u003e[]\u003c/samp\u003e\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e!\u003c/samp\u003e, \u003csamp\u003e+\u003c/samp\u003e（正号）, \u003csamp\u003e-\u003c/samp\u003e（负号）\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e*\u003c/samp\u003e, \u003csamp\u003e/\u003c/samp\u003e, \u003csamp\u003e%\u003c/samp\u003e\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e+\u003c/samp\u003e（加法）, \u003csamp\u003e-\u003c/samp\u003e（减法）\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e\u0026lt;=\u003c/samp\u003e, \u003csamp\u003e\u0026gt;=\u003c/samp\u003e, \u003csamp\u003e\u0026lt;\u003c/samp\u003e, \u003csamp\u003e\u0026gt;\u003c/samp\u003e\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e==\u003c/samp\u003e, \u003csamp\u003e!=\u003c/samp\u003e\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e^\u003c/samp\u003e\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e\u0026amp;\u0026amp;\u003c/samp\u003e\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e||\u003c/samp\u003e\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e=\u003c/samp\u003e\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003ecout\u003c/samp\u003e 的 \u003csamp\u003e\u0026lt;\u0026lt;\u003c/samp\u003e 与 \u003csamp\u003ecin\u003c/samp\u003e 的 \u003csamp\u003e\u0026gt;\u0026gt;\u003c/samp\u003e。\u003c/li\u003e\n\u003c/ol\u003e\u003c/li\u003e\n\u003cli\u003e所有 \u003csamp\u003eint\u003c/samp\u003e 常量以十进制形式给出\u003c/li\u003e\n\u003cli\u003eZ君没有对源代码进行混淆，所以源代码是可读的，你不必担心出现大量嵌套的花括号或此类的“垃圾代码”\u003c/li\u003e\n\u003cli\u003e运行时使用的变量占用的空间的峰值不超过 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-63\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-64\"\u003e8\u003c/span\u003e\u003cspan class=\"MJXp-mrow\" id=\"MJXp-Span-65\"\u003e\u003cspan class=\"MJXp-mtext MJXp-mono\" id=\"MJXp-Span-66\"\u003eMB\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-31\"\u003e8\\texttt{MB}\u003c/script\u003e。也即，\u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-67\"\u003e\u003cspan class=\"MJXp-msubsup\" id=\"MJXp-Span-68\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-69\" style=\"margin-right: 0.05em;\"\u003e2\u003c/span\u003e\u003cspan class=\"MJXp-mrow MJXp-script\" id=\"MJXp-Span-70\" style=\"vertical-align: 0.5em;\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-71\"\u003e21\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-32\"\u003e2^{21}\u003c/script\u003e 个 \u003csamp\u003eint\u003c/samp\u003e\u003c/li\u003e\n\u003cli\u003e调用函数的深度不会超过 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-72\"\u003e\u003cspan class=\"MJXp-msubsup\" id=\"MJXp-Span-73\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-74\" style=\"margin-right: 0.05em;\"\u003e10\u003c/span\u003e\u003cspan class=\"MJXp-mn MJXp-script\" id=\"MJXp-Span-75\" style=\"vertical-align: 0.5em;\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-33\"\u003e10^3\u003c/script\u003e 层\u003c/li\u003e\n\u003cli\u003e可能出现连续赋值，例如 \u003csamp\u003ea = (b = (c = 3) + 2) % c\u003c/samp\u003e\u003cul\u003e\u003cli\u003e之前对 \u003csamp\u003ec\u003c/samp\u003e 的赋值将会反映到之后对 \u003csamp\u003ec\u003c/samp\u003e 的引用上\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003e=\u003c/samp\u003e 是右结合的，\u003csamp\u003ea = b = c\u003c/samp\u003e 会被看作 \u003csamp\u003ea = (b = c)\u003c/samp\u003e\u003c/li\u003e\n\u003cli\u003e赋值的返回值为赋值以后的值\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e可能出现的程序流程控制语句：\u003cul\u003e\u003cli\u003e\u003csamp\u003eif (statement) statement [else statement]\u003c/samp\u003e\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003ewhile (statement) statement\u003c/samp\u003e\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003efor ([statement]; [statement]; [statement]) statement\u003c/samp\u003e\u003c/li\u003e\n\u003cli\u003e那些作为条件的 \u003csamp\u003estatement\u003c/samp\u003e 的返回值应当被视为 \u003csamp\u003ebool\u003c/samp\u003e 型的。具体的来说，若返回值为 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-76\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-77\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-34\"\u003e0\u003c/script\u003e，则为 \u003csamp\u003efalse\u003c/samp\u003e，若返回值非 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-78\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-79\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-35\"\u003e0\u003c/script\u003e，则为 \u003csamp\u003etrue\u003c/samp\u003e。在 \u003csamp\u003efor\u003c/samp\u003e 循环中，当第二个 \u003csamp\u003e[statement]\u003c/samp\u003e 取空时，视为 \u003csamp\u003etrue\u003c/samp\u003e。\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e空白字符只有新行符（即 \u003csamp\u003e\\n\u003c/samp\u003e）和空格。\u003c/li\u003e\n\u003cli\u003e声明变量时默认初始值为 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-80\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-81\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-36\"\u003e0\u003c/script\u003e，声明变量的同时不会进行赋值。\u003c/li\u003e\n\u003cli\u003e没有注释\u003c/li\u003e\n\u003cli\u003e所有的右花括号后没有分号\u003c/li\u003e\n\u003cli\u003e没有用来连接语句的逗号\u003c/li\u003e\n\u003cli\u003e没有函数和变量重名\u003c/li\u003e\n\u003c/ul\u003e",
      "misc": ""
    },
    {
      "title": "输入格式",
      "content": "\u003cp\u003e输入文件分为两个部分。\u003c/p\u003e\u003cp\u003e第一行，有一个整数 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-82\"\u003e\u003cspan class=\"MJXp-mi MJXp-italic\" id=\"MJXp-Span-83\"\u003eN\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-37\"\u003eN\u003c/script\u003e。它描述了源代码对应的输入文件 \u003csamp\u003eprogram.in\u003c/samp\u003e 中包含的整数数目。\u003c/p\u003e\u003cp\u003e以下 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-84\"\u003e\u003cspan class=\"MJXp-mi MJXp-italic\" id=\"MJXp-Span-85\"\u003eN\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-38\"\u003eN\u003c/script\u003e 个整数构成了源代码对应的输入文件 \u003csamp\u003eprogram.in\u003c/samp\u003e。\u003c/p\u003e\u003cp\u003e这之后的部分构成了源代码 \u003csamp\u003eprogram.cpp\u003c/samp\u003e。\u003c/p\u003e",
      "misc": ""
    },
    {
      "title": "输出格式",
      "content": "\u003cp\u003e输出文件是将 \u003csamp\u003eprogram.cpp\u003c/samp\u003e 编译后输入 \u003csamp\u003eprogram.in\u003c/samp\u003e 后所得到的输出。\u003c/p\u003e",
      "misc": ""
    },
    {
      "title": "限制与约定",
      "content": "\u003cp\u003e输入的所有 \u003csamp\u003eprogram.cpp\u003c/samp\u003e 都是手打的，每个输入文件的大小不超过 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-86\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-87\"\u003e7\u003c/span\u003e\u003cspan class=\"MJXp-mrow\" id=\"MJXp-Span-88\"\u003e\u003cspan class=\"MJXp-mtext MJXp-mono\" id=\"MJXp-Span-89\"\u003eKB\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-39\"\u003e7\\texttt{KB}\u003c/script\u003e。\u003c/p\u003e\u003cp\u003e测试点#1的 \u003csamp\u003eprogram.cpp\u003c/samp\u003e 见样例数据及附加文件下载。\u003c/p\u003e\u003cp\u003e测试点#2到#4的 \u003csamp\u003eprogram.cpp\u003c/samp\u003e 符合以下格式：\u003c/p\u003e\u003cpre class=\"sh_sourceCode\"\u003e\u003ccode class=\"sh_cpp\"\u003e\u003cspan class=\"sh_preproc\"\u003e#include\u003c/span\u003e\u003cspan class=\"sh_string\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\n\u003cspan class=\"sh_preproc\"\u003e#include\u003c/span\u003e\u003cspan class=\"sh_string\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\n\u003cspan class=\"sh_keyword\"\u003eusing\u003c/span\u003e \u003cspan class=\"sh_keyword\"\u003enamespace\u003c/span\u003e std\u003cspan class=\"sh_symbol\"\u003e;\u003c/span\u003e\n\u003cspan class=\"sh_type\"\u003eint\u003c/span\u003e \u003cspan class=\"sh_function\"\u003emain\u003c/span\u003e\u003cspan class=\"sh_symbol\"\u003e()\u003c/span\u003e\n\u003cspan class=\"sh_cbracket\"\u003e{\u003c/span\u003e\n    cout \u003cspan class=\"sh_symbol\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"sh_symbol\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"sh_number\"\u003e1\u003c/span\u003e\u003cspan class=\"sh_symbol\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"sh_symbol\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl\u003cspan class=\"sh_symbol\"\u003e;\u003c/span\u003e\n\u003cspan class=\"sh_cbracket\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在#2中：\u003csamp\u003e\u0026lt;1\u0026gt;\u003c/samp\u003e 处是一个仅包含加、减、乘、除、模运算和自然数常数的没有括号的表达式。\u003c/p\u003e\u003cp\u003e在#3和#4中：\u003csamp\u003e\u0026lt;1\u0026gt;\u003c/samp\u003e 处是一个不保证以上性质的表达式。\u003c/p\u003e\u003cp\u003e测试点#5中：没有除 \u003csamp\u003emain\u003c/samp\u003e 以外的函数，并且整个程序中只有顺序结构。\u003c/p\u003e\u003cp\u003e测试点#6和#7中：没有除 \u003csamp\u003emain\u003c/samp\u003e 以外的函数。\u003c/p\u003e\u003cp\u003e测试点#8中：所有的变量都是全局变量。\u003c/p\u003e\u003cp\u003e测试点#9和#10不保证任何特别的性质。\u003c/p\u003e\u003cp\u003e所有 \u003csamp\u003eprogram.cpp\u003c/samp\u003e 都可以用 MinGW GCC 4.7.2 编译运行。这就是说，所有的 \u003csamp\u003eprogram.cpp\u003c/samp\u003e 中都没有语法错误。然而由于编译命令的不同，直接编译得到的 \u003csamp\u003eprogram.exe\u003c/samp\u003e 在运行时有可能会因未为声明的变量和未设置返回值的函数设置 \u003cspan class=\"MathJax_Preview\" style=\"color: inherit;\"\u003e\u003cspan class=\"MJXp-math\" id=\"MJXp-Span-90\"\u003e\u003cspan class=\"MJXp-mn\" id=\"MJXp-Span-91\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-40\"\u003e0\u003c/script\u003e 的缺省值以及 \u003csamp\u003ebool\u003c/samp\u003e 类型的处理方式不同而与标程产生不同的输出。\u003c/p\u003e\u003cp\u003e为了更准确地说明程序可能出现的要素，也作为提示，下面给出了一个上下文无关文法，其初始符号为 \u003csamp\u003e\u003cstrong\u003ePROGRAM\u003c/strong\u003e\u003c/samp\u003e。保证每个 \u003csamp\u003eprogram.cpp\u003c/samp\u003e 都可被下面的文法生成，但是并非每个可被生成的程序都是合法的程序。\u003c/p\u003e\u003cpre\u003e\u003cstrong\u003ePROGRAM\u003c/strong\u003e ::= # include \u0026lt; iostream \u0026gt; # include \u0026lt; cstdio \u0026gt; using namespace std ; \u003cstrong\u003eFUNC_AND_VAR\u003c/strong\u003e\n\n\u003cstrong\u003eFUNC_AND_VAR\u003c/strong\u003e ::=\n| ε\n| int \u003cstrong\u003eNAME\u003c/strong\u003e ( \u003cstrong\u003eOPTPARAMS\u003c/strong\u003e ) { \u003cstrong\u003eSTATEMENTS\u003c/strong\u003e } \u003cstrong\u003eFUNC_AND_VAR\u003c/strong\u003e\n| int \u003cstrong\u003eDEFINEVAR\u003c/strong\u003e \u003cstrong\u003eDEFINEVARS\u003c/strong\u003e ; \u003cstrong\u003eFUNC_AND_VAR\u003c/strong\u003e\n\n\u003cstrong\u003eOPTPARAMS\u003c/strong\u003e ::=\n| ε\n| int \u003cstrong\u003eNAME\u003c/strong\u003e \u003cstrong\u003ePARAMS\u003c/strong\u003e\n\n\u003cstrong\u003ePARAMS\u003c/strong\u003e ::=\n| ε\n| , int \u003cstrong\u003eNAME\u003c/strong\u003e \u003cstrong\u003ePARAMS\u003c/strong\u003e\n\n\u003cstrong\u003eSTATEMENTS\u003c/strong\u003e ::=\n| ε\n| \u003cstrong\u003eSTATEMENT\u003c/strong\u003e \u003cstrong\u003eSTATEMENTS\u003c/strong\u003e\n\n\u003cstrong\u003eSTATEMENT\u003c/strong\u003e ::=\n| \u003cstrong\u003eEXPRESSION\u003c/strong\u003e ;\n| { \u003cstrong\u003eSTATEMENTS\u003c/strong\u003e }\n| int \u003cstrong\u003eDEFINEVAR\u003c/strong\u003e \u003cstrong\u003eDEFINEVARS\u003c/strong\u003e ;\n| if ( \u003cstrong\u003eEXPRESSION\u003c/strong\u003e ) \u003cstrong\u003eSTATEMENT\u003c/strong\u003e\n| if ( \u003cstrong\u003eEXPRESSION\u003c/strong\u003e ) \u003cstrong\u003eSTATEMENT\u003c/strong\u003e else \u003cstrong\u003eSTATEMENT\u003c/strong\u003e\n| for ( \u003cstrong\u003eSTATEMENT_IN_FOR\u003c/strong\u003e ; \u003cstrong\u003eOPTEXPRESSION\u003c/strong\u003e ; \u003cstrong\u003eSTATEMENT_IN_FOR\u003c/strong\u003e ) \u003cstrong\u003eSTATEMENT\u003c/strong\u003e\n| while ( \u003cstrong\u003eEXPRESSION\u003c/strong\u003e ) \u003cstrong\u003eSTATEMENT\u003c/strong\u003e\n| return \u003cstrong\u003eEXPRESSION\u003c/strong\u003e ;\n\n\u003cstrong\u003eSTATEMENT_IN_FOR\u003c/strong\u003e ::=\n| \u003cstrong\u003eOPTEXPRESSION\u003c/strong\u003e\n| int \u003cstrong\u003eDEFINEVAR\u003c/strong\u003e \u003cstrong\u003eDEFINEVARS\u003c/strong\u003e\n\n\u003cstrong\u003eOPTEXPRESSION\u003c/strong\u003e ::=\n| ε\n| \u003cstrong\u003eEXPRESSION\u003c/strong\u003e\n\n\u003cstrong\u003eEXPRESSION\u003c/strong\u003e ::=\n| \u003cstrong\u003eUNIT9\u003c/strong\u003e\n| \u003cstrong\u003eEXPRESSION\u003c/strong\u003e \u0026lt;\u0026lt; \u003cstrong\u003eUNIT9\u003c/strong\u003e\n| \u003cstrong\u003eEXPRESSION\u003c/strong\u003e \u0026gt;\u0026gt; \u003cstrong\u003eUNIT9\u003c/strong\u003e\n\n\u003cstrong\u003eUNIT0\u003c/strong\u003e ::=\n| \u003cstrong\u003eINT_CONSTANT\u003c/strong\u003e\n| \u003cstrong\u003eUNIT0\u003c/strong\u003e [ \u003cstrong\u003eEXPRESSION\u003c/strong\u003e ]\n| ( \u003cstrong\u003eEXPRESSION\u003c/strong\u003e )\n| \u003cstrong\u003eNAME\u003c/strong\u003e ( \u003cstrong\u003eOPTARGUS\u003c/strong\u003e )    // 注：此处的 \u003cstrong\u003eNAME\u003c/strong\u003e 是一个函数名\n| \u003cstrong\u003eNAME\u003c/strong\u003e    // 注：此处的 \u003cstrong\u003eNAME\u003c/strong\u003e 是一个变量名\n| cin\n| cout\n| endl\n\n\u003cstrong\u003eUNIT1\u003c/strong\u003e ::=\n| \u003cstrong\u003eUNIT0\u003c/strong\u003e\n| + \u003cstrong\u003eUNIT1\u003c/strong\u003e\n| - \u003cstrong\u003eUNIT1\u003c/strong\u003e\n| ! \u003cstrong\u003eUNIT1\u003c/strong\u003e\n\n\u003cstrong\u003eUNIT2\u003c/strong\u003e ::=\n| \u003cstrong\u003eUNIT1\u003c/strong\u003e\n| \u003cstrong\u003eUNIT2\u003c/strong\u003e * \u003cstrong\u003eUNIT1\u003c/strong\u003e\n| \u003cstrong\u003eUNIT2\u003c/strong\u003e / \u003cstrong\u003eUNIT1\u003c/strong\u003e\n| \u003cstrong\u003eUNIT2\u003c/strong\u003e % \u003cstrong\u003eUNIT1\u003c/strong\u003e\n\n\u003cstrong\u003eUNIT3\u003c/strong\u003e ::=\n| \u003cstrong\u003eUNIT2\u003c/strong\u003e\n| \u003cstrong\u003eUNIT3\u003c/strong\u003e + \u003cstrong\u003eUNIT2\u003c/strong\u003e\n| \u003cstrong\u003eUNIT3\u003c/strong\u003e - \u003cstrong\u003eUNIT2\u003c/strong\u003e\n\n\u003cstrong\u003eUNIT4\u003c/strong\u003e ::=\n| \u003cstrong\u003eUNIT3\u003c/strong\u003e\n| \u003cstrong\u003eUNIT4\u003c/strong\u003e \u0026lt; \u003cstrong\u003eUNIT3\u003c/strong\u003e\n| \u003cstrong\u003eUNIT4\u003c/strong\u003e \u0026lt;= \u003cstrong\u003eUNIT3\u003c/strong\u003e\n| \u003cstrong\u003eUNIT4\u003c/strong\u003e \u0026gt; \u003cstrong\u003eUNIT3\u003c/strong\u003e\n| \u003cstrong\u003eUNIT4\u003c/strong\u003e \u0026gt;= \u003cstrong\u003eUNIT3\u003c/strong\u003e\n\n\u003cstrong\u003eUNIT5\u003c/strong\u003e ::=\n| \u003cstrong\u003eUNIT4\u003c/strong\u003e\n| \u003cstrong\u003eUNIT5\u003c/strong\u003e == \u003cstrong\u003eUNIT4\u003c/strong\u003e\n| \u003cstrong\u003eUNIT5\u003c/strong\u003e != \u003cstrong\u003eUNIT4\u003c/strong\u003e\n\n\u003cstrong\u003eUNIT6\u003c/strong\u003e ::=\n| \u003cstrong\u003eUNIT5\u003c/strong\u003e\n| \u003cstrong\u003eUNIT6\u003c/strong\u003e ^ \u003cstrong\u003eUNIT5\u003c/strong\u003e\n\n\u003cstrong\u003eUNIT7\u003c/strong\u003e ::=\n| \u003cstrong\u003eUNIT6\u003c/strong\u003e\n| \u003cstrong\u003eUNIT7\u003c/strong\u003e \u0026amp;\u0026amp; \u003cstrong\u003eUNIT6\u003c/strong\u003e\n\n\u003cstrong\u003eUNIT8\u003c/strong\u003e ::=\n| \u003cstrong\u003eUNIT7\u003c/strong\u003e\n| \u003cstrong\u003eUNIT8\u003c/strong\u003e || \u003cstrong\u003eUNIT7\u003c/strong\u003e\n\n\u003cstrong\u003eUNIT9\u003c/strong\u003e ::=\n| \u003cstrong\u003eUNIT8\u003c/strong\u003e\n| \u003cstrong\u003eUNIT8\u003c/strong\u003e = \u003cstrong\u003eUNIT9\u003c/strong\u003e\n\n\u003cstrong\u003eOPTARGUS\u003c/strong\u003e ::=\n| ε\n| \u003cstrong\u003eEXPRESSION\u003c/strong\u003e \u003cstrong\u003eARGUS\u003c/strong\u003e\n\n\u003cstrong\u003eARGUS\u003c/strong\u003e ::=\n| ε\n| , \u003cstrong\u003eEXPRESSION\u003c/strong\u003e \u003cstrong\u003eARGUS\u003c/strong\u003e\n\n\u003cstrong\u003eDEFINEVARS\u003c/strong\u003e ::=\n| ε\n| , \u003cstrong\u003eDEFINEVAR\u003c/strong\u003e \u003cstrong\u003eDEFINEVARS\u003c/strong\u003e\n\n\u003cstrong\u003eDEFINEVAR\u003c/strong\u003e ::=\n| \u003cstrong\u003eNAME\u003c/strong\u003e\n| \u003cstrong\u003eDEFINEVAR\u003c/strong\u003e [ \u003cstrong\u003eINT_CONSTANT\u003c/strong\u003e ]\n\n\u003cstrong\u003eNAME\u003c/strong\u003e ::= 仅包含大小写字母、数字、下划线的非空字符串，且不以数字开头。\n\n\u003cstrong\u003eINT_CONSTANT\u003c/strong\u003e ::= 仅包含数字的非空字符串，且不以0开头，或这个字符串就是0。\n\u003c/pre\u003e",
      "misc": ""
    },
    {
      "title": "来源",
      "content": "\u003cp\u003e中国国家集训队互测2015 - By 卢啸尘\u003c/p\u003e",
      "misc": ""
    },
    {
      "title": "下载",
      "content": "\u003cp\u003e\u003ca href=\"/download.php?type=problem\u0026amp;id=98\"\u003e样例数据及附加文件下载\u003c/a\u003e\u003c/p\u003e",
      "misc": ""
    }
  ],
  "samples": [
    {
      "title": "样例一",
      "input": "\u003cpre\u003e2\n1 2\n#include\u0026lt;iostream\u0026gt;\n#include\u0026lt;cstdio\u0026gt;\nusing namespace std;\nint main()\n{int a, b; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; cout \u0026lt;\u0026lt; a + b \u0026lt;\u0026lt; endl;}\n\n\u003c/pre\u003e",
      "output": "\u003cpre\u003e3\n\n\u003c/pre\u003e",
      "explanation": "",
      "misc": ""
    },
    {
      "title": "样例二",
      "input": "\u003cpre\u003e10\n9\n6 1 7 5 1 7 2 2 4\n#include\u0026lt;iostream\u0026gt;\n#include\u0026lt;cstdio\u0026gt;\nusing namespace std;\nint n, a[100];\n\n\nint main()\n{\n    cin \u0026gt;\u0026gt; n;\n    int i, j, this_VARIABLE_is_NOT_used;\n    for (i = 1; i \u0026lt;= n; i = i + 1) cin \u0026gt;\u0026gt; a[i];\n    for (i = 1; i \u0026lt;= n; i = i + 1)\n    for (j = i + 1; j \u0026lt;= n; j = j + 1)\n    if (a[i] \u0026gt; a[j])\n    {\n        int t;\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n    }\n    for (i = 1; i \u0026lt;= n; i = i + 1)\n    {\n        cout \u0026lt;\u0026lt; a[i];\n        if (i == n) cout \u0026lt;\u0026lt; endl; else putchar(32);\n    }\n    return 0;\n}\n\n\u003c/pre\u003e",
      "output": "\u003cpre\u003e1 1 2 2 4 5 6 7 7\n\n\u003c/pre\u003e",
      "explanation": "",
      "misc": ""
    }
  ],
  "tags": [
    "UOJ",
    "集训队互测2015"
  ],
  "rules": {
    "runtime": "1000000000",
    "memory": "268435456",
    "stack": "268435456",
    "source": "51200"
  },
  "meta": {
    "created": "2021-04-09T21:31:29.108104704+08:00",
    "updated": "2021-04-09T21:31:29.108104704+08:00",
    "checked": "2021-04-09T21:31:29.108104704+08:00"
  },
  "misc": ""
}
