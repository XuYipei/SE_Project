// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rcmdsys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RcmdsysClient is the client API for Rcmdsys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RcmdsysClient interface {
	Upd(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Status, error)
	Query(ctx context.Context, in *UId, opts ...grpc.CallOption) (*ProbAry, error)
}

type rcmdsysClient struct {
	cc grpc.ClientConnInterface
}

func NewRcmdsysClient(cc grpc.ClientConnInterface) RcmdsysClient {
	return &rcmdsysClient{cc}
}

func (c *rcmdsysClient) Upd(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rcmdsys.Rcmdsys/Upd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcmdsysClient) Query(ctx context.Context, in *UId, opts ...grpc.CallOption) (*ProbAry, error) {
	out := new(ProbAry)
	err := c.cc.Invoke(ctx, "/rcmdsys.Rcmdsys/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RcmdsysServer is the server API for Rcmdsys service.
// All implementations must embed UnimplementedRcmdsysServer
// for forward compatibility
type RcmdsysServer interface {
	Upd(context.Context, *Record) (*Status, error)
	Query(context.Context, *UId) (*ProbAry, error)
	mustEmbedUnimplementedRcmdsysServer()
}

// UnimplementedRcmdsysServer must be embedded to have forward compatible implementations.
type UnimplementedRcmdsysServer struct {
}

func (UnimplementedRcmdsysServer) Upd(context.Context, *Record) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upd not implemented")
}
func (UnimplementedRcmdsysServer) Query(context.Context, *UId) (*ProbAry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedRcmdsysServer) mustEmbedUnimplementedRcmdsysServer() {}

// UnsafeRcmdsysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RcmdsysServer will
// result in compilation errors.
type UnsafeRcmdsysServer interface {
	mustEmbedUnimplementedRcmdsysServer()
}

func RegisterRcmdsysServer(s grpc.ServiceRegistrar, srv RcmdsysServer) {
	s.RegisterService(&Rcmdsys_ServiceDesc, srv)
}

func _Rcmdsys_Upd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcmdsysServer).Upd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcmdsys.Rcmdsys/Upd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcmdsysServer).Upd(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rcmdsys_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcmdsysServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcmdsys.Rcmdsys/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcmdsysServer).Query(ctx, req.(*UId))
	}
	return interceptor(ctx, in, info, handler)
}

// Rcmdsys_ServiceDesc is the grpc.ServiceDesc for Rcmdsys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rcmdsys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rcmdsys.Rcmdsys",
	HandlerType: (*RcmdsysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upd",
			Handler:    _Rcmdsys_Upd_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Rcmdsys_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rcmdsys.proto",
}
